---
layout:     post                    # 使用的布局（不需要改）
title:      gphoto                # 标题 
subtitle:    第一篇                  #副标题
date:       2019-09-21              # 时间
author:     BY Edlward              # 作者
header-img: img/post-bg-2015.jpg    #这篇文章标题背景图片
catalog: true                       # 是否归档
tags:                               #标签
    - GPHOTO2
---
```

编译所需软件包：

libusb

http://ftp.cn.debian.org/debian/pool/main/libu/libusb/libusb_0.1.12.orig.tar.gz

libtool

http://ftp.cn.debian.org/debian/pool/main/libt/libtool/libtool_2.4.orig.tar.gz

popt

http://ftp.cn.debian.org/debian/pool/main/p/popt/popt_1.16.orig.tar.gz

libgphoto2

http://ftp.cn.debian.org/debian/pool/main/libg/libgphoto2/libgphoto2_2.4.11.orig.tar.gz

gphoto2

http://ftp.cn.debian.org/debian/pool/main/g/gphoto2/gphoto2_2.4.11.orig.tar.gz

fuse

http://ftp.cn.debian.org/debian/pool/main/f/fuse/fuse_2.8.5.orig.tar.gz

gphotofs

http://ftp.cn.debian.org/debian/pool/main/g/gphotofs/gphotofs_0.4.0.orig.tar.gz

 

首先创建你自己的程序目录，如：mkdir /home/gphoto 下载以上所需软件包到 /home/gphoto目录下

创建你自己的程序安装目录，如：mkdir /home/install

创建编译环境变量, /home/arm/cross-tool/bin 更换成你的ARM交叉编译工具路径

export PATH=$PATH:/home/arm/cross-tool/bin

export gp_dir=/home/gphoto/install

export myhost=arm-none-linux-gnueabi

 

1.编译libusb

cd /home/gphoto

tar xvf libusb_0.1.12.orig.tar.gz

cd libusb-0.1.12

 ./configure --prefix=$gp_dir --host=$myhost

make

make install

 

2.编译libtool

cd /home/gphoto

tar xvf libtool_2.4.orig.tar.gz

cd libtool-2.4

 ./configure --prefix=$gp_dir --host=$myhost

make

make install

 

3.编译popt

cd /home/gphoto

tar xvf popt_1.16.orig.tar.gz

cd popt-1.16

 ./configure --prefix=$gp_dir --host=$myhost
make

make install

 

4.编译libgphoto2

cd /home/gphoto

tar xvf libgphoto2_2.4.11.orig.tar.gz

cd libgphoto2-2.4.11

./configure --prefix=$gp_dir --host=$myhost \

LDFLAGS='-ldl' \

LIBLTDL=$gp_dir/lib/libltdl.a \

LTDLINCL=-I$gp_dir/include/ \

LIBUSB_LIBS=$gp_dir/lib/libusb.a \

LIBUSB_CFLAGS=-I$gp_dir/include/ \

--with-libexif=no

make

make install

 

5.编译 gphoto2

cd /home/gphoto

tar xvf gphoto2_2.4.11.orig.tar.gz

cd gphoto2-2.4.11

 ./configure --prefix=$gp_dir --host=$myhost \
LDFLAGS='-ldl' \
POPT_CFLAGS=-I$gp_dir/include/ \
POPT_LIBS="-L$gp_dir/lib/ -lpopt" \
LIBLTDL=$gp_dir/lib/libltdl.a \
LTDLINCL=-I$gp_dir/include/ \
LIBUSB_LIBS=$gp_dir/lib/libusb.a \
LIBUSB_CFLAGS=-I$gp_dir/include/ \
--with-libexif=no \
--with-libgphoto2=$gp_dir \
--without-cdk \
--without-readline \
--without-aalib \
--without-jpeg \
--without-pthread

make

make install

 

6.编译 fuse

cd /home/gphoto

tar xvf fuse_2.8.5.orig.tar.gz
cd fuse-2.8.5
 ./configure --prefix=$gp_dir --host=$myhost

make
make install 

```
[相机镜头控制协议的分析与转换](https://wenku.baidu.com/view/01c4010531b765ce04081454.html)  

### MTP USB数据抓包分析
[MTP工具](https://github.com/Edlward/usbmtp_dissector)  
[MTP工具](https://github.com/Edlward/mtp-tools)  

[Linux-创建rc红外遥控平台设备,实现重复功能(2)](https://www.cnblogs.com/lifexy/p/9783914.html)  

### IR Control
[Research Sony Multi Interface Research](https://github.com/Aeronavics/ValleyForge/wiki/Research-Sony-Multi-Interface-Research)  
```
# Introduction
Modern Sony consumer still and video camera have changed from using the LANC comminucation interface to a new serial one operating over UART. This document details research carried out so far in determining the operation of this protocol by analysing the operation of the CAMremote. Using this knowledge to make communication attempts with a Bus Pirate or resistors between IO lines and ground or 3.3V. To access the electrical connection in the connector on a CAMremote cable was dissasembled to to expose connections. Where required breakout wires were soldered to the back to provide attachment points for exrernal connections.

## Cameras Used For Testing
* HX400 Still
* a6000 Still
* PJ670 Video

# Connector Pinout
The following [pinout](http://peterwedege.blogspot.co.nz/2016/01/analyzing-sonys-new-multiport-protocol.html) as found online has been found to be correct on scoping the lines to observe behaviour. 

    1: "VBUS" - 5V-Input voltage from the USB host
    2: "D-" - USB-data (negative)
    3: "D+" - USB-data (positive)
    4: "USB_ID" - For USB-OnTheGo
    5: "GND" - Connected in camera with Pin 14 ("AV GND")
    -----------------------------------------------------------------------------------------------------------------
    6: "D_3.1V" / "LANC_DC" - Output for 3.3V
    7: "XRESET_REQ" - Input for reset request, small capacitances (i.e. scope probe) to ground are enough to trigger.
    8: "UART_TX" - Optional output for serial interface
    9: "UART_RX" - Optional output for serial interface
    10: "AD_JACK_IN" - Analog input for resistance to detect the connected cable / accessory type
    11: "LINEOUT_R" / "XAE_LOCK_SW" - Optional audio output (right, decoupled in the camera with capacitor) and / or input for release (1st stage) in the photo mode with proper resistance at AD_JACK_IN
    12: "LINEOUT_L" / "XSHUT_SW" - Optional audio output (left, decoupled in the camera with capacitor) and / or input for release (2nd stage) in the photo mode with proper resistance at AD_JACK_IN
    13: "VIDEO" - Optional composite video output
    14: "AV_GND" - Connected the camera to pin 5 ("GND")
    15: "XPWR_ON" - Input for external ON / OFF switch pull to GND to toggle.

Layout from the back of the connector

    1  | | | | | 5
	6 |||||||||| 15

Layout for the purchased connectors

    A1 -> 1
    ..
    A5 -> 5

    1 -> 15
    ..
    10 -> 6

# CAMremote connector
The CAMremote has most connector pins used wired directly into the cable with a few components on the PCB. This circuitry is

    Pins On Connector
	  15    14       10
      |     |        |
      |     |--100k--|
      |     3        |
      |     K        |
      |_D   9        |
       _|---|        |
      | S G |        |
      |     |        |
	  
	  CAMremote cable

The 100k resistor between pins 10 and 14 appears to be for the resistance detect circuit in AD_JACK_IN to detect the acessory type. If this is pulled with a smaller resistor to GND or 3.3V the CAMremote is no longer able to control the camera. The FET and 3.9k pull down resistor are used to power the camera on and off. The camera has an internal pullup on pin 15 holding it at 3.3V if the CAMremote cable is only plugged into the camera and not the remote the FET stays off allowing the camera to power on. When PIN 15 is pulled to GND it will toggle the power state from ON to sleep or sleep to ON.

# Serial Format
Anaysing the serial comminications between the CAMremote and camera it was found to be UART with the following format. Idle 1 at 3.3V, 0 at GND, 9600 baud rate, 8 data bits, even parity and one stop bit. When zooming with the CAMremote the format the CAMremote uses changes to no parity and two stop bits. This is assumed to be a bug as later when the zoom commands were send with a Bus Pirate using the original format the camera responded corrently. This indicates that the camera possibly doesn't use the parity bits.

# On Connecting the CAMremote cable to the camera
When the cable is plugged into the camera while connected to the CAMremote the camera sends a packet consisting of ''0x25, 0x30, 0x30, 0x30, 0x2A'' and the CAMremote replys with ''0x26, 0x30, 0x30, 0x30, 0x38, 0x30, 0x2A''. No further activity occurs on the serial lines until the CAMremote sends a command. If the CAMremote is turned off or disconnected when the camble is plugged into the camera the camera sends the same packet 11 times at approximatly 55ms to 65ms intervals. After this the camera does not respond to commands from the CAMremote.

# Focus and Shutter
The CAMremote is able to focus and activate the shutter with still cameras only. This is done by pulling the XAE_LOCK_SW and XSHUT_SW lines to GND. XAE_LOCK_SW activates focus and XSHUT_SW the shutter. XAE_LOCK_SW must stay low when XSHUT_SW is pulled to ground. At no point during this process is there communication on the serial lines.

 It seems on the A6000, that pulling the UART_TX, and UART_RX to ground will activate the shutter. This seems weird as this also happens when the shutter button is pushed (one is for focus and the other is for shutter). However this must mean that the UART is disabled for the entire time the button is pressed.  

# Other CAMremote Commands
The other commands that the CAMremote is able to send to the camera are start/stop video recording, zoom tele with variable speed and zoom wide with variable speed.

With the Sony HX400 the following commands were sent and received.

    Delay           Camera                                 CAMremote
                                      Start Recording
                                                 0x23 0x37 0x31 0x30 0x30 0x2A
    320us 0x24 0x37 0x31 0x30 0x30 0x30 0x2A
     43ms                                        0x23 0x37 0x31 0x31 0x30 0x2A
    360us 0x24 0x37 0x31 0x31 0x30 0x30 0x2A
    1.2s  0x25 0x37 0x36 0x31 0x30 0x2A
     11ms                                        0x26 0x37 0x36 0x31 0x30 0x30 0x2A
                                      Stop Recording 
                                                 0x23 0x37 0x31 0x30 0x30 0x2A
    320us 0x24 0x37 0x31 0x30 0x30 0x30 0x2A
     43ms                                        0x23 0x37 0x31 0x31 0x30 0x2A
    360us 0x24 0x37 0x31 0x31 0x30 0x30 0x2A
    580ms 0x25 0x37 0x36 0x30 0x30 0x2A
     11ms                                        0x26 0x37 0x36 0x30 0x30 0x30 0x2A
                                      Zoom Wide
                                                 0x23 0x37 0x35 0x31 0x30 0x2A
    320us 0x24 0x37 0x35 0x31 0x30 0x30 0x2A
                                      Zoom Tele
                                                 0x23 0x37 0x34 0x31 0x30 0x2A
    320us 0x24 0x37 0x34 0x31 0x30 0x30 0x2A
    For both zoom directions the 4th byte controls speed ranges from 0x31 to 0x38.*
                                    Zoom Stop
                                                 0x23 0x37 0x35 0x39 0x30 0x2A
    320us 0x24 0x37 0x35 0x39 0x30 0x30 0x2A

\* If the zoom speed selected is greater than the camera supports the fastest zoom speed supported is used.


# Protocol
* 1st byte remote: initiates with '#' and replies with '&'. Camera initiates with '%' and replies with '$'
* 2nd byte always a '7'
* 3rd byte command byte - refer to full list
* 4th byte option byte - refer to full list
* 5th byte always '0' but actually not needed
* 6th byte always '0', but is '2' if the command is not supported
* 7th byte always '*'

Known aspects from above excluding handshake.
* 1st byte remote initiates with 0x23 , replys with 0x26. Camera initiates with 0x25, replys with 0x24.
* 2nd byte no change.
* 3rd byte is a command byte.
* 4th byte is a command option byte.
* 5th byte always 0x30.
* 6th byte always 0x2A for command and 0x30 for reply.
* 7th byte reply only always 0x2A.

The response packet always has the 2nd through 5th bytes identical to the command packet. This indicates that the response echos back the command that has been sent.

A handshake is required before commands can be sent over the serial link. This consists of the camera sending ''0x25, 0x30, 0x30, 0x30, 0x2A'' and the remote replying with ''0x26, 0x30, 0x30, 0x30, 0x38, 0x30, 0x2A''.

# Extra Command Search
By using the CAMremote to complete the handshake and then disconnecting to allows a Bis Pirate to send commands to the camera. This was done to allows arbitrary packets to be sent to the camera to search for valid command options. Initially only changed the command option and command option bytes. From this it was found that if a command and/or command option is unsupported the 6th byte of the response is 0x32. Modifying the 5th byte had no noticeable effect, it was always echoed back unchanged.

Command packets with all combinations of command and command option bytes were sent to the camera, HX400 only, using the Bus Pirate. The responses were checked for 0x30 as the 6th byte. This found the following commands and options.

    Command   Option    Action
      0x30     0x30     Grid on/on
      0x30     0x31
      0x32     0x30     Focus
      0x32     0x31
      0x33     0x30     Shutter
      0x33     0x31

0x30 cycles through grid line options when the option is 0x30 and requires the command with option 0x31 to be sent before accepting option 0x30 again. On the still cameras commands 0x32 and 0x33 have no effect. On the video camera 0x32 activates focus in still mode with option 0x30 and 0x31 releases it, can be released before and must be after capturing a still image. 0x33 captures a still image on the video camera with option 0x30 and option 0x31 must be sent to release it. Still images are able to be captured while recording video using command 0x33 and focusing is not required.

Using the Bus Pirate to cycle over the 2nd byte the camera only replys when the 2nd byte is 0x37. Possibly an addressing feature as it is one less than the 5th byte sent to the camera from the remote in its handshake reply. No action was taken with the 1st byte as this is assumed to be a data direction indicator.

Any change to the 6th byte and the camera does not reply. If bytes are added or removed betwen the commadn option and the last byte with it being 0x2A the reply echoes back the changes and does not start replying until after 0x2A has been sent. This indicates that the final byte is a stop byte and must be 0x2A.

## Video Recording
If the camera does not receive a reply to the the message that it sends after the start record command it attempts 5 times at approximately 60ms intervals. Of note in these transmissions is that the second to last byte increments by one every time from 0x30 to 0x34, so this is potentially an attempt counter. If no reply is sent after all attempts 300ms later the handshake process is started again. This requires any remote to send a reply packet after any transmission from the camera. Also until it can be tested by replying to the camera transmission it is assumed that the command has to be sent with option 0x30 and then 0x31 to release it.

# Camera Features Supported

### HX400
* Focus with XAE_LOCK_SW
* Shutter with XSHUT_SW
* Start/Stop video recording
* Zoom tele two speeds; 0x31, 0x32
* Zoom wide two speeds; 0x31, 0x32
* Power On/Off

### a6000
* Focus with XAE_LOCK_SW
* Shutter with XSHUT_SW
* Start/Stop video recording
* Zoom tele lens dependent
* Zoom wide lens dependent
* Power On/Off

### PJ670
* Focus via Serial Command
* Shutter via Serial Command
* Start/Stop video recording
* Zoom tele two speeds; 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38
* Zoom wide two speeds; 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38
* Power On/Off

## Full Command List Found
    Command   Option    Action
      0x30     0x30     Grid on/on
      0x30     0x31     Finish grid command
      0x31     0x30     Start/Stop video recording
      0x31     0x31     Finish Start/Stop command
      0x32     0x30     Focus
      0x32     0x31     Finish focus command
      0x33     0x30     Shutter
      0x33     0x31     Finish shutter command
      0x34     0x31     Zoom Tele speed 1
      0x34     0x32     Zoom Tele speed 2
      0x34     0x33     Zoom Tele speed 3
      0x34     0x34     Zoom Tele speed 4
      0x34     0x35     Zoom Tele speed 5
      0x34     0x36     Zoom Tele speed 6
      0x34     0x37     Zoom Tele speed 7
      0x34     0x38     Zoom Tele speed 8
      0x35     0x31     Zoom Wide speed 1
      0x35     0x32     Zoom Wide speed 2
      0x35     0x33     Zoom Wide speed 3
      0x35     0x34     Zoom Wide speed 4
      0x35     0x35     Zoom Wide speed 5
      0x35     0x36     Zoom Wide speed 6
      0x35     0x37     Zoom Wide speed 7
      0x35     0x38     Zoom Wide speed 8
      0x35     0x39     Zoom Stop


These commands make much more sense if we convert them to ASCII

## Full Command List Found
    Command   Option    Action
      0     0     Grid on/on
      0     1     Finish grid command
      1     0     Start/Stop video recording
      1     1     Finish Start/Stop command
      2     0     Focus
      2     1     Finish focus command
      3     0     Shutter
      3     1     Finish shutter command
      4     1     Zoom Tele speed 1
      4     2     Zoom Tele speed 2
      4     3     Zoom Tele speed 3
      4     4     Zoom Tele speed 4
      4     5     Zoom Tele speed 5
      4     6     Zoom Tele speed 6
      4     7     Zoom Tele speed 7
      4     8     Zoom Tele speed 8
      5     1     Zoom Wide speed 1
      5     2     Zoom Wide speed 2
      5     3     Zoom Wide speed 3
      5     4     Zoom Wide speed 4
      5     5     Zoom Wide speed 5
      5     6     Zoom Wide speed 6
      5     7     Zoom Wide speed 7
      5     8     Zoom Wide speed 8
      5     9     Zoom Stop
```



[相机远程释放引脚列表](https://www.doc-diy.net/photo/remote_pinout/)  

[The open hardware project to build an inexpensive and customizable infrared remote control for Nikon cameras](http://www.bigmike.it/ircontrol/)  
[尼康 ML - L3 DIY IR Remote Hack Part I](https://bayesianadventures.wordpress.com/2013/08/09/nikon-ml-l3-ir-remote-hack/)  
[test](http://goughlui.com/2013/12/06/teardown-and-project-clone-nikon-ml-l3-ir-remote-and-emulation/)  
[ RC-Servo-Tester-/MCU_Source/Servo_Tester_v4/Source/ir_protocol.c ](https://github.com/mocona05/RC-Servo-Tester-/blob/b9d6ad4afbf6dd28f95d15331f7faaa572c3ac96/MCU_Source/Servo_Tester_v4/Source/ir_protocol.c)  




### Node JS
[libgphoto2的Node.js包装器](https://www.npmjs.com/package/gphoto2)  
[node-gphoto2](https://github.com/lwille/node-gphoto2.git)  
[ts-gphoto2-driver](https://github.com/TypedProject/ts-gphoto2-driver)  

### libtdl
动态链接库
[libtdl](https://www.gnu.org/software/libtool/manual/html_node/Libltdl-interface.html)  

```
Install libgphoto2 and gphoto2 from source on Raspberry Pi
https://hyfrmn.wordpress.com/2015/02/03/install-libgphoto2-and-gphoto2-from-source-on-raspberry-pi/
FEBRUARY 3, 2015HYFRMN
I wanted to control my camera, a Nikon D5300, through my raspberry pi. Unfortunately the version of libgphoto2 installed by default has a known bug that causes it to break. The bug is fixed in the latest version, so I decided to download and compile the latest versions. Here are the steps I used.
First install the dependencies:

# Install Dependencies
sudo apt-get install libltdl-dev libusb-dev libusb-1.0 libexif-dev libpopt-dev
Next download the latest stable versions:

# Download Latest libgphoto2
wget http://downloads.sourceforge.net/project/gphoto/libgphoto/2.5.7/libgphoto2-2.5.7.tar.gz
# Download Latest gphoto2
wget http://downloads.sourceforge.net/project/gphoto/gphoto/2.5.6/gphoto2-2.5.6.tar.gz

Next we will unpack the files, configure the builds, compile the library and install it.

tar -xvzf libgphoto2-2.5.7.tar.gz
cd libgphoto2-2.5.7
./configure
make #This is going to take some time. Go get a cup of coffee.
sudo make install
Finally repeat the same process with gphoto2.

tar -xvzf gphoto2-2.5.6.tar.gz
cd gphoto2-2.5.6
./configure
make #Much faster then libgphoto2
sudo make install
If everything went well, you should be able to plug in your camera, and connect using the following.

gphoto2 --auto-detect


```




```
ffmpeg+ffserver搭建流媒体服务器
ffmpeg和ffserver配合使用可以实现实时的流媒体服务。
一、理解
里边主要有如下四个东西，搞清楚他们之间的关系就差不多明白了。
1. ffmpeg
2. ffserver
3. ffserver.conf
4. feed1.ffm

1. ffmpeg，负责媒体文件的transcode工作，把你服务器上的源媒体文件转换成要发送出去的流媒体文件。
2. ffserver，负责响应客户端的流媒体请求，把流媒体数据发送给客户端。
3. ffserver.conf，ffserver启动时的配置文件，在这个文件中主要是对网络协议，缓存文件feed1.ffm（见下述）和要发送的流媒体文件的格式参数做具体的设定。
4. feed1.ffm，可以看成是一个流媒体数据的缓存文件，ffmpeg把转码好的数据发送给ffserver，如果没有客户端连接请求，ffserver把数据缓存到该文件中。

二、http的建立流程
1. 配置ffserver.conf文件（初次接触可以参考ffmpeg源码中的doc/ffserver.conf，里边有详细的注释）
如下写一个示例
Port 10535
RTSPPort 5454
BindAddress 0.0.0.0、
MaxHTTPConnections 2000
MaxClients 1000
MaxBandwidth 1000
CustomLog -
NoDaemon

#实时流数据配置(参考源码ffmpeg/test/下的ffserver.conf)
File /tmp/feed1.ffm
FileMaxSize 1M
ACL allow 127.0.0.1

Feed feed1.ffm
Format avi
#
BitExact
DctFastint
IdctSimple
VideoFrameRate 10
VideoSize 352x288
VideoBitRate 100
VideoGopSize 30
NoAudio

PreRoll 10
StartSendOnKey
MaxTime 100

#已经存在的文件而非实时流

2、如何实现播放
（1）实时流用http传输
如果传输硬盘上的文件，则：
ffserver -f myfile/ffmpeg0.8.9/ffserver.conf & ffmpeg -i inputfile(输入文件) http://localhost:10535/feed1.ffm
如何传输摄像头捕获的实时流，则：
ffserver -f myfile/ffmpeg0.8.9/ffserver.conf & ffmpeg -f video4linux2 -framerate 30 -i /dev/video0 http://127.0.0.1:8090/feed1.ffm

启动ffserver和ffmpeg。ffserver先于ffmpeg启动，它在启动的时候需要加参数-f指定其配置文件。ffserver启动后，feed1.ffm就会被创建，这时如果你打开feed1.ffm看看，会发现feed1.ffm开始的部分已经写入了内 容，你可以找到关键字ffm以及向客户端传送流的配置信息，在feed1.ffm做缓冲用的时候，这些信息是不会被覆盖掉的，就把它们理解为 feed1.ffm文件的头吧。

ffserver启动后，ffmpeg启动，它启动时加的一个关键参数就是“http://ip:10535/feed1.ffm”，其中ip是运行 ffserver主机的ip，如果ffmpeg和ffserver都在同一系统中运行的话，用localhost也行。ffmpeg启动后会与 ffserver建立一个连接(短暂的连接)，通过这第一次的连接，ffmpeg从ffserver那里获取了向客户端输出流的配置，并把这些配置作为自 己编码输出的配置，然后ffmpeg断开了这次连接，再次与ffserver建立连接(长久的连接)，利用这个连接ffmpeg会把编码后的数据发送给 ffserver。

如果你观察ffserver端的输出就会发现这段时间会出现两次HTTP的200，这就是两次连接的过程。

ffmpeg从摄像头获取数据后，按照输出流的编码方式编码，然后发送给ffserver，ffserver收到ffmpeg的数据后，如果网络上 没有播放的请求，就把数据写入feed1.ffm中缓存，写入时把数据加上些头信息然后分块，每块4096B（每块也有结构），当feed1.ffm的大 小到了ffserver.conf中规定的大小后，就会从文件开始（跳过头）写入，覆盖旧的数据。直到网络上有播放的请求，ffserver从 feed1.ffm中读取数据，发送给客户端。

(2)本地文件用http传输
ffserver -f /etc/ffserver.conf
用命令启动ffserver，然后用ffplay http://ip:port/test.flv,或者在vlc中输入以上网址也可实现播放。

(3)本地文件用rtsp传输
ffserver -f /etc/ffserver.conf
用命令启动ffserver，然后用ffplay rtsp://ip:port/rtsp.mpg，或者在vlc中输入以上网址也可实现播放。
备注：在做测试的时候，用rtsp不能传输flv文件。

```

```
gPhoto2是一个免费软件，提供了在类Unix系统上通过终端来控制数码相机的功能，开发队伍来自世界各地的自愿者，现在已支持超过1700多款机 型。可以运行在Linux, FreeBSD, NetBSD, MacOS X等系统上。同时在大部分发行版的软件仓库中都有。通过Picture Transfer Protocol (PTP) 协议来和相机通讯。
 
    安装libgphoto2 是为了，使用到gphoto2的 API  链接地址：http://www.gphoto.org/doc/api/gphoto2-camera_8h.html ，即可以调用libgphoto2的库来进行编程。而gphoto2只是提供命令行的控制照相机。gphoto2官网的文档http://gphoto.sourceforge.net/doc/manual/ref-gphoto2-cli.html。
当然，你可以安装gphoto2的图形界面gtkam。
一，安装 gphoto2 ：
$sudo apt-get install gphoto2
$ sudo apt-get install gtkam
二、将相机用USB线与电脑连接，最好使用有源的USB HUB，以免供电不足，打开相机电源，执行命令，查看 gphoto2 是否识别到了照相机：
$ gphoto2 --auto-detect
就会看到 USB PTP Class Camera  usb：001,002

三、拍照
 $gphoto2 --capture-image 拍照
 $ gphoto2  --capture-image-and-download 拍照后传到电脑的当前目录下
  拍照时可能会报错，关于错误解答，请看官网链接：http://www.gphoto.org/doc/manual/FAQ.html#FAQ-could-not-claim-USB

四，libgphoto2 安装
$ sudo apt-get install libgphoto2-2-dev
 安装成功之后，就可以使用 api编程的了
五，C++模板
#include < gphoto2/gphoto2-camera.h >
// C++ includes
#include < cstdlib >
#include < cstdio >

// C includes
#include < fcntl.h >

// Class header include
#include "../include/gphoto2_handler.hpp"
void errorCallback(GPContext *context, const char *format, va_list args, void *data);
void messageCallback(GPContext *context, const char *format, va_list args, void *data);
GPhoto2Handler::GPhoto2Handler()
{
    gp_camera_new(&camera);
    context = gp_context_new();

    gp_context_set_error_func(context, errorCallback, NULL);
    gp_context_set_message_func(context, messageCallback, NULL);

    int return_code = gp_camera_init(camera, context);
    if (return_code < GP_OK)
    {
        ROS_ERROR("%s", "No camera detected.");
        gp_camera_free(camera);
    }
}
std::string GPhoto2Handler::takePicture()
{
    std::string empty_filename;

    CameraFilePath camera_file_path;
    int return_code = gp_camera_capture(camera, GP_CAPTURE_IMAGE, &camera_file_lpath, context);

    if (return_code)
    {
        ROS_ERROR("%s", "Could not capture the image from the camera.");
        return empty_filename;
    }

    int file_descriptor = open(camera_file_path.name, O_CREAT | O_WRONLY, 0644);

    CameraFile *file;
    return_code = gp_file_new_from_fd(&file, file_descriptor);

    if (return_code)
    {
        ROS_ERROR("%s", "Could not create a new file to store the image from the camera.");
        return empty_filename;
    }
    return_code = gp_camera_file_get(camera,
                                     camera_file_path.folder,
                                     camera_file_path.name,
                                     GP_FILE_TYPE_NORMAL,
                                     file,
                                     context);
    if (return_code)
    {
        ROS_ERROR("%s", "Could not download the captured image from the camera.");
        return empty_filename;
    }

    return_code = gp_camera_file_delete(camera,
                                        camera_file_path.folder,
                                        camera_file_path.name,
                                        context);
    if (return_code)
    {
        ROS_WARN("%s", "Could not delete the captured image from the camera.");
    }

    gp_file_free(file);

    std::string picture_filename(camera_file_path.name);
    return picture_filename;
}


代码可能看糊涂，就大概总结一下吧：
关键地方就下面几个函数：
//自动拍照功能，获取图像
gp_camera_capture(camera, GP_CAPTURE_IMAGE, &camera_file_lpath, context);
//获取打开文件的权限
int file_descriptor = open(camera_file_path.name, O_CREAT | O_WRONLY, 0644);
//获取图像路径和文件名
eturn_code = gp_camera_file_get(camera,
                                     camera_file_path.folder,
                                     camera_file_path.name,
                                     GP_FILE_TYPE_NORMAL,
                                     file,
                                     context);
获取这个路径之后，就可以下载照片到自己的电脑上了，保存照片电脑上的操作可以采用CV::write()操作

//删掉照相机中的这个图像，可以不删掉，让它保持在照相机中
return_code = gp_camera_file_delete(camera,
                                        camera_file_path.folder,
                                        camera_file_path.name,
                                        context);
具体函数，可以看以上官网说明。


```
