---
layout:     post                    # 使用的布局（不需要改）
title:      SLAM EKF                # 标题 
subtitle:    第一篇                  #副标题
date:       2019-0-29              # 时间
author:     BY Edlward              # 作者
header-img: img/post-bg-2015.jpg    #这篇文章标题背景图片
catalog: true                       # 是否归档
tags:                               #标签
    - SLAM
---

[chaoxing](http://mooc.chaoxing.com/category/08/30/24)  
[chaoxing2](http://59.75.114.218:9080/gnxw/1024.jhtml)  
[浅谈机器人导航与避障浅谈机器人导航与避障](https://www.aiimooc.com/mall/list-htm-active-6-catid-756.html)  
[电子信息工程专业课程](http://www.08nm.com/forum.php?mod=forumdisplay&action=list&fid=143)  
[黑洞成像背后的算法－－图像处理与反问题](https://zhuanlan.zhihu.com/p/62026270)  
[图像处理中的数学方法](http://bicmr.pku.edu.cn/~dongbin/Teaching_files/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6%E6%96%B9%E6%B3%95-18-19/index.html)  

##
[利用 Maxima 求解常微分方程](https://blog.csdn.net/liyuanbhu/article/details/7585405)  
[Linux下的数学工具Maxima 简明教程（上）](http://www.matrix67.com/blog/archives/337)  
[自动机，状态机，有限自动机，有限状态机，有限状态自动机，非确定下有限状态自动，确定性有限状态自动机的区别于联系](https://blog.csdn.net/c601097836/article/details/47040703)  


```
参考或原文 www.zhihu.com 

计算机专业概念有点大。就计算机科学与技术专业而言，以下这些是必修的：


1、计算机组成原理（包括先修课程“数字逻辑与数字系统”，简称“数电”）：这是一门硬件基础课，学完后你能清楚的知道如何从用最简单的数字元件，像搭积木一样构成整个计算机系统，那就算及格了。

2、线性代数，概率论和离散数学：要知道，凡是能称之为“科学”的专业，就必须有一定的数学功底，否则难以称作“科学”。这三门课我觉得是本科时期最重要的三门数学课，比高等数学重要。如果你想在计算机科学的道路上走远点，那这三门可是必修的。

3、MIT开设的《Introduction To algorithm》，中文版叫《算法导论》：我觉得应该学习它而不是国内习惯开设的《数据结构》。数据结构仅仅是算法的一部分，国内的数据结构课程回避了很多本质的东西，仅仅是对一些常见的数据结构的罗列，学起来总有些不痛不痒的感觉。《Introduction To algorithm》虽然有些章节夹杂着很多很让人讨厌的“数学”，但却能从本质上带你领略这门十分必要而且有趣儿的课。

4、操作系统与编译原理：操作系统可以说是《算法导论》的实验课，最好能在学习期间自己实现一个小型的操作系统，或者操作系统各分系统的Demo。编译原理可能是普遍本科生觉得难的一门课，但是作为软件科学家，这是基础中的基础，学完之后所有的语言在你看来应该没有太大的区别，这么课应该是离散数学+算法导论的实验课。最好能在学习期间自己实现一个小型的编译器，语言最好是自创。

5、掌握一门常用的编程语言和编程技术：能了解你用过的所有的程序内部大致是怎样的，能用你熟悉的语言编写大部分的程序，至少不能是对任何一个程序满头雾水。

以上这些不难做到，我觉得是基础中的基础，我偏激的以为，不能掌握他们就不应该获得学位。

简而言之：

    数学课 (概率，统计，微积分等等）
    语言课（java，c++等）
    数据结构和算法
    计算机网络
    操作系统和编译原理

其实只要算法和数学牛，可以吃遍硅谷大多数的IT公司。
具体书籍

    Concrete Mathematics  具体数学，绝对是计算机科学的数学基础“之一”，国内的计算机科学跟不上国外的一大原因，我始终认为是数学上的差距。
    Introduction to Algorithms 算法导论，所有的程序都需要算法作为基础，所以算法是不得不学的。
    Introduction to Computer Science and Programming 整体的介绍了计算机，同时也让学生了解CS能干嘛，自己该干嘛。
    Operating System Engineering 操作系统的重要性不言而喻，同时也介绍了编译器。
    Network 网络编程，中国 大学的本科生们有多少能熟练于网络编程。当今又有多少程序不需要考虑到网络。

有时候问自己几个问题：

    当你学完各种数学、原理、算法之后，你能用这些知识解决什么问题？
    你能开发出什么应用或系统吗？你具备多强的开发能力？
    是更多人对这个专业更感兴趣了，还是心生厌倦、恐惧、甚至放弃了？
    大学毕业到现在，还有多少知识你还记着？有多少还在用？ 

其实能解决问题的课程才是最重要的。

```

## Hey
>EKF

```

clear
N=200;
w(1)=0;
w=randn(1,N)
x(1)=0;
a=1;
for k=2:N;
x(k)=a*x(k-1)+w(k-1);
end


V=randn(1,N);
q1=std(V);
Rvv=q1.^2;
q2=std(x);
Rxx=q2.^2; 
q3=std(w);
Rww=q3.^2;
c=0.2;
Y=c*x+V;

p(1)=0;
s(1)=0;
for t=2:N;
p1(t)=a.^2*p(t-1)+Rww;
b(t)=c*p1(t)/(c.^2*p1(t)+Rvv);
s(t)=a*s(t-1)+b(t)*(Y(t)-a*c*s(t-1));
p(t)=p1(t)-c*b(t)*p1(t);
end

t=1:N;
plot(t,s,'r',t,Y,'g',t,x,'b');
```
