---
layout:     post                    # 使用的布局（不需要改）
title:      uboot                # 标题 
subtitle:    第一篇                  #副标题
date:       2019-06-09              # 时间
author:     BY Edlward              # 作者
header-img: img/post-bg-2015.jpg    #这篇文章标题背景图片
catalog: true                       # 是否归档
tags:                               #标签
    - linux
---
[uboot](https://blog.csdn.net/ooonebook/article/details/52965362)  
### 笔记
```
    在讲加载地址和入口地址之前先简单说下u-boot的启动过程。执行make可以找到链接脚本，位于board/$(BOARDNAME)/U-boot.lds，从连接脚本中知道第一个源文件为cpu\arm920t\start.s中，从start.s开顺藤摸瓜了解u-boot的启动过程，其主要分为两个阶段，start.s为第一个阶段，主要进行的工作有：关闭看门狗，屏蔽中断，设置时钟，初始化cpu，初始化堆栈（为调用c语言程序做准备），初始化SDRAM（lowlevel函数），然后进行代码重定位（relocate函数，将u-boot从flash拷贝到SDRAM中）。

        进行完上述一系列工作后为第二阶段准备好了RAM空间，程序进入第二阶段，跳转到start_armboot函数（lib_arm\Board.c），该函数通过调用全局的函数指针数组init_sequence进行初始化，包括cpu，board（在全局的gd->bd中设置了arch_number，以及boot_params的位置0x30000100），中断，环境变量，串口，以及ram（在全局的gd->bd中设置了内存起始地址和大小）初始化。然后初始化堆栈，初始化nand flash（为后续读写nand flash需要做准备），网卡，usb（为下载内核文件系统做准备）。然后程序进入倒数计时，如果没有被按键打断那么进入一个菜单，否则就启动内核。

        u-boot的终极目的是启动内核，那么是通过什么命令启动内核的呢，在u-boot的环境变量中有一个参数bootcmd= nand read.jffs2 0x30007fc0 kernel; bootm 0x30007fc0（此处根据具体的u-boot而定），意在将内核读取到0x30007fc0，然后在该地址处通过bootm命令启动内核，因此关键在于bootm命令，其具体的实现在do_bootm函数（common\cmd_bootm.c）中，这个函数的本质工作是：根据bootm命令传入的地址，以及uImage（uImage其实是包括一个头部和真正的内核，头部是包括内核的一些信息，真正的内核就是vmlinux）头部的加载地址和入口地址，来移动内核到入口地址，最后就通过函数指针的调用跳转到该地址，u-boot从此一去不复返，进入了内核的世界。

    先通过编译内核后来看看加载地址和入口地址均，下图所示，两个地址均为0x30008000，下面截取bootm函数中的部分代码来分析如何进入内核的。

```








### uboot

```
#include <asm-offsets.h>          /* 头文件在根目录下的include及根
#include <config.h>             目录下的arch/arm/include目录 */ 
#include <version.h>
#include <asm/system.h>
#include <linux/linkage.h>

.globl _start
_start: b   reset //跳转到reset 进行地址判断，设置SVC模式
    ldr pc, _undefined_instruction  //未定义指令异常
    ldr pc, _software_interrupt     //软中断
    ldr pc, _prefetch_abort         //预取址终止
    ldr pc, _data_abort             //数据异常
    ldr pc, _not_used               //未使用，占位用
    ldr pc, _irq                    //中断
    ldr pc, _fiq                    //快中断
#ifdef CONFIG_SPL_BUILD
_undefined_instruction: .word _undefined_instruction
_software_interrupt:    .word _software_interrupt
_prefetch_abort:    .word _prefetch_abort
_data_abort:        .word _data_abort
_not_used:      .word _not_used
_irq:           .word _irq
_fiq:           .word _fiq
_pad:           .word 0x12345678 /* now 16*4=64 */
#else
_undefined_instruction: .word undefined_instruction
_software_interrupt:    .word software_interrupt
_prefetch_abort:    .word prefetch_abort
_data_abort:        .word data_abort
_not_used:      .word not_used
_irq:           .word irq
_fiq:           .word fiq
_pad:           .word 0x12345678 /* now 16*4=64 */
#endif  /* CONFIG_SPL_BUILD */

.global _end_vect
_end_vect:

    .balignl 16,0xdeadbeef
```

##  CONFIG_SPL_BUILD宏
> 我们可以看到异常向量表有两个定义，多了宏：#ifdef CONFIG_SPL_BUILD 
什么是SPL呢，我们需要从启动机制说起： 
以S3C6410为例： 
1、将uboot.bin前4K拷贝到片内内存SRAM中，进行初始化内存SDRAM 
2、将uboot.bin的内容约为200k全部拷贝到SDRAM中，PC指针跳转到SDRAM开始运行（前4K内容会判断自身在哪个内存当中，判断在SDRAM中则直接跳过前4K到后续部分进行运行。） 
3、将内核加载到SDRAM中运行。

有了这种情况，随着厂家处理器改进：增加了片内内存的大小约为96K左右，希望整个Uboot.bin全部在片内内存进行运行，然后把内核加载到片外内存SDRAM中运行。 
但是呢，uboot整体编译出来至少100K-200K，这样就造成了没法执行上述方案，于是Uboot作者就把uboot设置成2个部分： 
ubootspl.bin (16K)和 uboot.bin （210K） 
ubootspl.bin放到片内SRAM运行，进行初始化内存，将uboot.bin拷贝到外存SDRAM中运行，然后PC指针直接跳转到SDRAM中进行运行。 
这就是#ifdef CONFIG_SPL_BUILD 宏的由来。


## 异常向量的地址映射问题
根据ARM的手册我们知道，异常向量地址的入口为0x00000000或者0xffff0000然而片内内存中开始地址0x00000000为ROM区，开始地址不可写，处理器厂家知道这样设计有些问题，所以在片内内存开辟了一块新的区域专门用于放置异常向量表。这样做话我们就需要将异常向量表的地址重新定位到厂家的那块内存。 
上述是uboot在片内内存中，如果是在SD卡运行，且启用了MMU，这时候就很麻烦，RAM公司也考虑到了这种情况，所以在CP15协处理器中设计了一个叫VBAR的寄存器，我们将异常向量表的地址放到VBAR寄存器，那么发生异常以后ARM处理器会自动的从VBAR寄存器寻到异常向量表的地址，跳转到该处进行运行。

uboot编译以后的文件


绿颜色的uboot 文件：是所有.o文件链接后的文件，很大约有900K，里面包含了很多的调试信息和注释信息，是不能放到板子里运行的，是用来调试的文件。(elf格式的image) 
uboot.bin是uboot文件剥离掉调试信息和注释信息的文件，可以放置到板子中运行。(原始二进制文件(raw image)) 
uboot.map (符号表) 
uboot.srec ( S-Record格式的image) 
uboot.lds （uboot的链接脚本文件） 
uboot.16K（ubootspl-16K 文件）

```
查看uboot反汇编指令：
  arm-linux-objdump -S u-boot | less
```

```
pad:           .word 0x12345678 /* now 16*4=64 */
#endif  /* CONFIG_SPL_BUILD */

.global _end_vect
_end_vect:

    .balignl 16,0xdeadbeef
 ```
 
 这段_pad标识占位 
.global _end_vect 标识异常向量表结束 
.balignl 16,0xdeadbeef 标识如果没有16字节对齐就填充0xdeadbeef 直到填充到下个标号16字节对齐为止。


### 利用cp15协处理器设置异常向量表地址
```
#if !(defined(CONFIG_OMAP44XX) && defined(CONFIG_SPL_BUILD))
    /* Set V=0 in CP15 SCTRL register - for VBAR to point to vector */
    mrc p15, 0, r0, c1, c0, 0   @ Read CP15 SCTRL Register
    bic r0, #CR_V       @ V = 0
    mcr p15, 0, r0, c1, c0, 0   @ Write CP15 SCTRL Register

    /* Set vector address in CP15 VBAR register */
    ldr r0, =_start
    mcr p15, 0, r0, c12, c0, 0  @Set VBAR
#endif
```

 1、将cp15 SCTRL寄存器读出来 
2、清零第13位（#CR_V在arch/arm/include/asm/system.h中定义 是1<<13bit） 
3、写会SCTRL寄存器 
该位意思是中断异常地址设置0x00000000,选择1是映射到0xffff0000 
4、将异常向量表实际运行的地址放入r0 
5、将r0的内容写入VBAR寄存器

VBAR寄存器：如果中断向量表的地址没有被映射到0xffff0000的话，有一种更好的方法，可以使用该寄存器将中断向量表的地址映射到任何地址。

 
