---
layout:     post                    # 使用的布局（不需要改）
title:      Socket.io                # 标题 
subtitle:    第一篇                  #副标题
date:       2019-02-19              # 时间
author:     BY Edlward              # 作者
header-img: img/post-bg-2015.jpg    #这篇文章标题背景图片
catalog: true                       # 是否归档
tags:                               #标签
    - gphoto
---
###
[Node.js RESTful API](http://www.runoob.com/nodejs/nodejs-restful-api.html)  

[如何在JavaScript中的Raspberry PI上构建REST Web API](http://www.robert-drummond.com/2013/05/08/how-to-build-a-restful-web-api-on-a-raspberry-pi-in-javascript-2/)  
#raspberry#基于树梅派的REST Web API构架

http://thefloppydisk.wordpress.com/2013/03/08/server-side-javascript-on-a-raspberry-pi-how-to-install-node-js/



http://thefloppydisk.wordpress.com/2013/05/08/how-to-build-a-restful-web-api-on-a-raspberry-pi-in-javascript/



http://tomholderness.wordpress.com/2013/01/03/raspberry-pi-temperature-server/



http://pixelhandler.com/posts/develop-a-restful-api-using-nodejs-with-express-and-mongoose



Before writing the entire system is based on a Raspberry Pi weather and energy detection system, including the indoor and outdoor temperature and humidity, as well as energy conditions in the room. Raspberry detection node is based embedded systems. After the completion of the details of the system will be written.



Express is a lightweight node.js web application framework. It provides the basic HTTP infrastructure that makes it easy to create REST APIs. [1]


--------------------- 
作者：barry963 
来源：CSDN 
原文：https://blog.csdn.net/barry963/article/details/25333845 
版权声明：本文为博主原创文章，转载请附上博文链接！




与Node http服务器一起使用  
Socket io
[Node.js 與 Socket.io – 即時聊天室實作](http://single9.net/2017/12/node-js-%E8%88%87-socket-io-%E5%8D%B3%E6%99%82%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%AF%A6%E4%BD%9C/)  
[無名大猫咪与小狮子](https://www.cnblogs.com/xiezhengcai/default.html?page=1)  
[将Nodejs移植到Arm](https://blog.csdn.net/wanyi3605/article/details/78131241)  
[nodejs&socket.IO 嵌入式linux移植与使用策略](https://blog.csdn.net/xfeng20/article/details/85265146)   
[树莓派3(armv7)下配置node.js](https://blog.csdn.net/weixin_41576693/article/details/80556601)  
[使用nodejs开发树莓派远程控制小车](https://blog.csdn.net/github_33696241/article/details/51756355?utm_source=blogxgwz1)  
[采集rtsp流摄像头到浏览器实时播放方案](https://blog.csdn.net/derek518/article/details/78362183)  
[树莓派视频遥控小车 + iOS / Android / web应用](https://www.jianshu.com/p/d0c8b51e9647)  

```
嵌入式开发语言 -- nodejs

nodejs是一个新兴的后台语言。
数据采集，数据存储，协议转换，数据传输，web程序模块架构，系统应用，路由选择等

Node.js是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。Node.js对一些特殊用例进行了优化，提供了替代的API，使得V8在非浏览器环境下运行得更好。
Node.js是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。


nodejs作为一个新兴的后台语言，有很多吸引人的地方：
1、RESTful API
2、单线程

      Node.js可以在不新增额外线程的情况下，依然可以对任务进行并行处理 —— Node.js是单线程的。它通过事件轮询（event loop）来实现并行操作，对此，我们应该要充分利用这一点 —— 尽可能的避免阻塞操作，取而代之，多使用非阻塞操作。

3、非阻塞IO
4、V8虚拟机
5、事件驱动


MQTT（Message Queuing Telemetry Transport，消息队列遥测传输）是IBM开发的一个即时通讯协议，有可能成为物联网的重要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部连接起来，被用来当做传感器和致动器（比如通过Twitter让房屋联网）的通信协议。
```


```
node.js版本  0.12.6   下载地址：https://nodejs.org/download/release/v0.12.6/   我用的版本是：node-v0.12.6.tar.gz

arm开发板    SOC是S5PV210 CPU是Cortex A8

交叉编译器是 gcc version 4.4.6 (for CW210 Concenwit Tech)   根据自己个人板子的情况来吧



开始前的准备工作：

export CC=arm-linux-gcc 
export CXX=arm-linux-g++
export LD=arm-linux-ld
export RAINLIB=arm-linux-rainlib
export AR=arm-linux-ar
export CFLAGS=-static
export CXXFLAGS=-static
export LDFLAGS=-static

最后三项是静态编译

这是编译成功后file node的结果：

tarena@ubuntu:/opt/rootfs/node/bin$ file node
node: ELF 32-bit LSB executable, ARM, version 1 (SYSV), statically linked, for GNU/Linux 2.6.32, not stripped



接下来就是

./configure --prefix=/home/tarena/workdir --dest-cpu=arm --without-snapshot

prefix是你make install的文件夹，就是说你想将编译好的node安装的地方

加--without-ssl就编译错误



然后： make  花了一个半小时，看你自己的机器咯

最后： sudo  make install 



最后将编译好拷贝到开发板：node -v   看有没有0.12.6



我还有块arm9的板子，官方是支持armv6到armv8的但是那些源文件是动态链接的，我在自己的板子（armv7）上试过，没得反应，所以才决定自己编译的。

关于node的更高版本，提示错误说要g++ 4.8.0以上版本，交叉编译器找到就不容易了，支持c++ 11恐怕更难找了。

0.12.6是15年发布的，基本上很多模块都能用的，亲测crontab mysql模块都没得问题。

有谁在arm9上编译成功的，一定要留个言。这是我找到的唯一线索，你们可以试试：http://www.nodejs-news.com/nodejs-tech/nodejs-armv5-armv6-howto/



```




```

Node.js嵌入式开发之(一)交叉编译
2018年05月21日 15:59:43 sanallen 阅读数：1350
参考文档
本文档涉及到的目标硬件为全志H8(8核Cortex-A7，Armv7架构)，但是对其他Arm芯片也有一定的借鉴意义，只需要更换交叉编译链即可。

开发环境介绍
主机操作系统：Ubuntu14.04 64位
目标平台：CQA83t 全志H8
交叉工具链：arm-linux-gnueabihf，gcc4.9.2
node.js版本：6.10.0
编译时间：2018.5.21
注意：node.js随着新版本的发布，已经对GCC的版本有一定要求了，具体要求可以查阅node.js代码目录下的BUILDING.md文件。node-v6.10.0对gcc编译器的要求为4.8.0以上。

设置本地编译链和交叉编译链
# 在/etc/bash.bashrc的最后增加如下指令
# Native Compiler
export AR_host="ar"
export CC_host="gcc"
export CXX_host="g++"
export LINK_host="g++"

# Allwinner H8 CQA83t cross compiler
export ARCH=arm
export PATH=/opt/toolchain/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/:$PATH
export CROSS_COMPILE=arm-linux-gnueabihf-
export CC=/opt/toolchain/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-gcc    
export CXX=/opt/toolchain/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-g++    
export LD=/opt/toolchain/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-ld
export AR=/opt/toolchain/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-ar
export AS=/opt/toolchain/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-as
export RANLIB=/opt/toolchain/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-ranlib
# 修改完成之后需要重启命令行才能生效
# 你可以通过如下指令来确认交叉编译链是否已经设置好
echo $CC 
# 当显示/opt/toolchain/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-gcc时表示交叉编译链
# 已经设置好
# 当需要更换为本机编译时屏蔽上面的指令即可
注意：

在进行node.js的编译之前除了设置好交叉编译器之外还要设置本地编译链，否则会出现和issues#18620相同的错误。

配置
./configure --prefix=/usr/local/H8/Ubuntu/node-6.10.0 --dest-cpu=arm --dest-os=linux 
            --cross-compiling --without-snapshot --with-arm-float-abi=hard
注意：

当配置node.js的arm版本时，必须指定--without-snapshot选项，否则会出现错误

编译&安装
make -j8
make install
```
