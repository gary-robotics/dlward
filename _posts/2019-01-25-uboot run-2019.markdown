---
layout:     post                    # 使用的布局（不需要改）
title:      boot run                # 标题 
subtitle:    第一篇                  #副标题
date:       2018-06-04              # 时间
author:     BY Edlward              # 作者
header-img: img/post-bg-2015.jpg    #这篇文章标题背景图片
catalog: true                       # 是否归档
tags:                               #标签
    - uboot
---

### 
[uboot](https://blog.csdn.net/qq_16777851/article/details/81570476)  
[uboot2](https://blog.csdn.net/silent123go/article/details/53141316)   
### 启动方式

三星推荐的启动方式：

假定你的BootLoader必须小于96KB，并大于16KB。

然后假定Bootloader为80KB：



启动过程模拟：

先开机启动，BL0上电，BL0会加载外部启动设备中的bootloader的前16KB到SRAM，运行BL1



BL1在运行时要加载BL2(bootloader中80 - 16KB = 64KB)

到SRAM的16KB的开始用，去运行BL2会初始化DDR。

并且将OS搬运到DDR去执行OS，启动完成。



UBOOT实际上的启动的方法：

UBOOT的大小随意，假定是200KB

启动过程是这样子的：

先开机上电，BL0运行，BL0会加载外部启动设备中的UBOOT

的前16KB（BL1）到SRAM中去运行，BL1运行会初始化DDR。

然后将整个UBOOT，搬运到我们的DDR中。



然后用一条长跳转指令从SRAM中直接跳转到DDR中继续执行我们的UBOOT。

直到UBOOT完全启动。

```
今天SD卡和TF卡都到手了，可以开始大干一场了，顺便结束掉在uboot上的纠缠。
这几天查了一些资料，也解决了上一篇博客里出现的一些疑问。


首先，superboot是友善独家制作的，可以写入nand作为bootloader，但是其源码不公开，也就是说除了友善的板子之外的板子无法使用superboot。superboot无法像uboot那样进入uboot模式，所以在批量刷机或者设计不涉及uboot、内核，从而不需要频繁烧写内核、uboot的上层应用制作中有优势，如果用来调试内核，一次次通过SD连minitools烧写是极度不方便的。


其次，Tiny210友善提供的就是superboot而没有uboot（我是指我的光盘里，网上tiny210的uboot也是很多的），所以我找不到uboot源码。


再次， 板子上电之后会有个等待时间，等待用户敲击键盘从而阻止内核加载，停留在uboot状态。之前疑惑个等待时间是怎么设定的，能不能不等待。其实这个是由uboot的环境变量所决定的。
进入uboot时，输入help可以查看所有uboot所支持的命令。
其中输入print可以查看所有的uboot环境变量：


iTOP-4412 # print
bootdelay=2
baudrate=115200
stdin=serial
stdout=serial
stderr=serial
bootcmd=movi read kernel 40008000;movi read rootfs 40df0000 100000;bootm 4000800
0 40df0000
Environment size: 160/16380 bytes
其中的bootdelay=2即表示uboot会等待两秒用户的反应，可以通过setenv修改
bootcmd即表示uboot反应时间过后执行的操作：这句话的意思就是将nand中的内核及文件系统读入内存，然后依次执行。


这里安利一个好方法，方便内核的调试，因为每次内核编译好后都通过烧写的办法是比较麻烦的，通过设置uboot的环境变量，利用uboot支持的tftp功能能很容易的调试编译好的内核：
首先，当然是要在虚拟机linux系统下搭建好tftp服务器，方法都大同小异，无非是下载所用的软件，然后写好环境变量，新建tftp服务器的路径,假定/tftp_space，重启服务，网上有很多资料，然后记住虚拟机的ip地址，假定192.168.1.2。


然后就是设置uboot的环境变量：


setenv ipaddr 192.168.1.10 //和服务器在同一网段
setenv server 192.168.1.2   //即服务器的ip地址
setenv bootcmd tftp c0008000 uImage \; bootm c0008000 //uboot起来后从tftp服务器获取uImage到内存c0008000的地址，然后运行这段内存里的内核
saveenv //保存环境变量到flash中


这里为了查看tftp设置好了没有可以在终端中使用ping指令，看看板子和虚拟机能否ping通，如果不能ping通，排除掉tftp设置及ip地址错误的基本原因之外，还有很多可能。
因为板子是通过网线和windows连接，然后window通过虚拟机连接，要确保每一层没有问题。
先将板子和window cmd下ping通 然后windows和虚拟机终端ping通，这两个没问题说明网络是通畅的
如果还是不行确保windows和虚拟机的防火墙关闭
最后还是不行的话，只能建议将pc和板子连在一个交换机上，这样可以排除最后的可能。


这样一来，每次编译出新的内核，只需把镜像文件放在之前建的/tftp_space下，上电后板子自动加载服务器的内核，就方便许多了。


有的时候在saveenv的时候会出现错误，我也不知道为什么，那么改了半天重启之后uboot的环境变量依然是老样子。
那么怎么办呢？我们可以尝试从源码直接修改uboot的环境变量，从而编译得到的uboot就具有希望的环境变量了：
在源码的common路径下的env_common.c中有这么一段:


#define XMK_STR(x) #x
#define MK_STR(x) XMK_STR(x)


uchar default_environment[] = {
#ifdef CONFIG_BOOTARGS
"bootargs=" CONFIG_BOOTARGS "\0"
#endif
#ifdef CONFIG_BOOTCOMMAND
"bootcmd=" CONFIG_BOOTCOMMAND "\0"
#endif
#ifdef CONFIG_RAMBOOTCOMMAND
"ramboot=" CONFIG_RAMBOOTCOMMAND "\0"
#endif
#ifdef CONFIG_NFSBOOTCOMMAND
"nfsboot=" CONFIG_NFSBOOTCOMMAND "\0"
#endif
#if defined(CONFIG_BOOTDELAY) && (CONFIG_BOOTDELAY >= 0)
"bootdelay=" MK_STR(10) "\0"
#endif
#if defined(CONFIG_BAUDRATE) && (CONFIG_BAUDRATE >= 0)
"baudrate=" MK_STR(CONFIG_BAUDRATE) "\0"
#endif
#ifdef CONFIG_LOADS_ECHO
"loads_echo=" MK_STR(CONFIG_LOADS_ECHO) "\0"
#endif
#ifdef CONFIG_ETHADDR
"ethaddr=" MK_STR(CONFIG_ETHADDR) "\0"
#endif
#ifdef CONFIG_ETH1ADDR
"eth1addr=" MK_STR(CONFIG_ETH1ADDR) "\0"
#endif
#ifdef CONFIG_ETH2ADDR
"eth2addr=" MK_STR(CONFIG_ETH2ADDR) "\0"
#endif
#ifdef CONFIG_ETH3ADDR
"eth3addr=" MK_STR(CONFIG_ETH3ADDR) "\0"
#endif
#ifdef CONFIG_ETH4ADDR
"eth4addr=" MK_STR(CONFIG_ETH4ADDR) "\0"
#endif
#ifdef CONFIG_ETH5ADDR
"eth5addr=" MK_STR(CONFIG_ETH5ADDR) "\0"
#endif
#ifdef CONFIG_IPADDR
"ipaddr=" MK_STR(CONFIG_IPADDR) "\0"
#endif
#ifdef CONFIG_SERVERIP
"serverip=" MK_STR(CONFIG_SERVERIP) "\0"
#endif
#ifdef CONFIG_SYS_AUTOLOAD
"autoload=" CONFIG_SYS_AUTOLOAD "\0"
#endif
#ifdef CONFIG_PREBOOT
"preboot=" CONFIG_PREBOOT "\0"
#endif
#ifdef CONFIG_ROOTPATH
"rootpath=" MK_STR(CONFIG_ROOTPATH) "\0"
#endif
#ifdef CONFIG_GATEWAYIP
"gatewayip=" MK_STR(CONFIG_GATEWAYIP) "\0"
#endif
#ifdef CONFIG_NETMASK
"netmask=" MK_STR(CONFIG_NETMASK) "\0"
#endif
#ifdef CONFIG_HOSTNAME
"hostname=" MK_STR(CONFIG_HOSTNAME) "\0"
#endif
#ifdef CONFIG_BOOTFILE
"bootfile=" MK_STR(CONFIG_BOOTFILE) "\0"
#endif
#ifdef CONFIG_LOADADDR
"loadaddr=" MK_STR(CONFIG_LOADADDR) "\0"
#endif
#ifdef  CONFIG_CLOCKS_IN_MHZ
"clocks_in_mhz=1\0"
#endif
#if defined(CONFIG_PCI_BOOTDELAY) && (CONFIG_PCI_BOOTDELAY > 0)
"pcidelay=" MK_STR(CONFIG_PCI_BOOTDELAY) "\0"
#endif
#ifdef  CONFIG_EXTRA_ENV_SETTINGS
CONFIG_EXTRA_ENV_SETTINGS
#endif
"\0"
};
修改这样参数即可制定自己想要的环境变量了。


最后，关于上次编译的4412的uboot为什么错误呢，有几点原因：


首先，并没有制定编译器，现在用arm-linux-的4.4.1版本，如果编译的时候懒得制定，要在环境变量中修改：


在Ubuntu命令行中，执行下面命令： 
#cd /root 
#vim .bashrc 


然后在“.bashrc”文件中最后一行添加如下信息
export PATH=$PATH:/usr/local/arm/arm-2009q3/bin


修改完成后保存退出 执行下列命令，更新环境发量 
#source .bashrc
这样就可以选定4.4.1的交叉编译工具链了


其次，通过网上的资料可知完整的uboot由三部分组成，bl0.bin、bl1.bin、bl2.bin。其中bl0是固化在芯片中的。上回编译的uboot.bin只是uboot的一部分，当然是无法启动的。
卖家提供了一个create_uboot.sh的脚本，那么我们来看看脚本里写的是什么：


./build_uboot.sh clean


ls


sleep 2


#cp include/configs/tc4_plus_pop_android.h include/configs/tc4_plus_android.h


#cp include/configs/tc4_plus_no_charge_android.h include/configs/tc4_plus_android.h
if [ -z $1 ]
then
./build_uboot.sh
else
./build_uboot.sh $1
fi


ls
可见这个脚本不是重要部分，重要的是其启动的另一个脚本：build_uboot.sh:
#!/bin/sh


option1="tc4_ubuntu"


sec_path="../CodeSign4SecureBoot/"
CPU_JOB_NUM=$(grep processor /proc/cpuinfo | awk '{field=$NF};END{print field+1}')
ROOT_DIR=$(pwd)
CUR_DIR=${ROOT_DIR##*/}


case "$1" in
clean)
echo make clean
make mrproper
;;
*)

if [ ! -d $sec_path ]
then
echo "**********************************************"
echo "[ERR]please get the CodeSign4SecureBoot first"
echo "**********************************************"
return
fi


if [ -z $1 ]
                then 
make itop_4412_android_config


elif [ $1 = $option1 ]
                then
make itop_4412_android_ubuntu_config
else
make itop_4412_android_config
fi

make -j$CPU_JOB_NUM

if [ ! -f checksum_bl2_14k.bin ]
then
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo "There are some error(s) while building uboot, please use command make to check."
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
exit 0
fi

cp -rf checksum_bl2_14k.bin $sec_path
cp -rf u-boot.bin $sec_path
rm checksum_bl2_14k.bin

cd $sec_path

cat E4412_N.bl1.SCP2G.bin bl2.bin all00_padding.bin u-boot.bin tzsw_SMDK4412_SCP_2GB.bin > u-boot-iTOP-4412.bin
mv u-boot-iTOP-4412.bin $ROOT_DIR

rm checksum_bl2_14k.bin
#rm BL2.bin.signed.4412
rm u-boot.bin


echo 
echo 
;;

esac
这段代码并不难理解，就是先检测上级目录中有无的另一个路径/CodeSign4SecureBoot，
然后由传入的参数决定make的配置参数是 itop_4412_android_ubuntu_config 还是itop_4412_android_config
然后make config 然后make编译
之后将编译生成的 u-boot.bin和checksum_bl2_14k.bin拷贝到/CodeSign4SecureBoot路径下 
删除当前路径下编译出的文件
进入/CodeSign4SecureBoot路径
将E4412_N.bl1.SCP2G.bin bl2.bin all00_padding.bin u-boot.bin tzsw_SMDK4412_SCP_2GB.bin  拼接为u-boot-iTOP-4412.bin
然后将这个最终uboot移动到原路径下
删除编译产生文件，大功告成


知道了这个原理 于是重新编译了uboot.bin，用同样的方法手动产生u-boot-iTOP-4412.bin烧入板子中 没有问题。


关于210的uboot源码和uboot的原理，考虑再三，先不进行210uboot移植了，对当前的任务没有意义，用superboot麻烦了一点，当先4412的板子uboot也可以用，只知道参考教程修改修改uboot功能 如载入uboot的时候LCD显示logo之类的功能就足够了，uboot的移植还是等到以后有时间再慢慢研究吧。


温故而知新，解决了之前的疑惑，终于要操起SD卡来拯救两块变砖的开发板啦。




首先是4412板子的TF卡烧写：


1.制作可以烧写的TF卡
按照常理，应当先对TF进行分区，这样的话在就可以保留出不被uboot占用的空间，在win7下可以查看到空出来的盘符。
然而TF卡分区我所知道的办法要在uboot下，而现在板子已经变砖了，无法进入uboot，所以我们要将整张TF卡做成uboot启动盘。
首先虚拟机上输入df -l 查看挂接的设备
TF卡插入虚拟机中，（注意vmware的驱动正常，usb服务的启动）
再次输入df -l查看挂接的设备，如果TF卡已经接入虚拟机，则会多出一个/dev/sdx的设备，如果没有，则仔细检查驱动和服务。我的设备号是sdb1。
进入uboot源码的路径，拷贝u-boot-iTOP-4412.bin到该路径下，然后执行./mkuboot /dev/sdb（我的设备号是sdb1，但是我们要将整个卡制作，所以是sdb）
对于没有mkuboot.sh脚本的源码该怎么办呢？让我们来看看这个脚本：


#!/bin/bash


#
# This script will create a u-boot binary for movinand/mmc boot
#


chmod 777 sdfuse_q -R

echo "Fuse iTOP-4412 trustzone uboot file into SD card"
cd ./sdfuse_q


if [ -z $1 ]
then
./sd_fusing_exynos4x12.sh /dev/sdb u-boot-iTOP-4412.bin
else
./sd_fusing_exynos4x12.sh $1 u-boot-iTOP-4412.bin
fi


cd ..


显然，这个脚本的只是将参数/dev/sdb 和 u-boot-iTOP-4412.bin传入sd_fusing_exynos4x12.sh脚本：


#!/bin/sh
#
# Copyright (C) 2010 Samsung Electronics Co., Ltd.
#              http://www.samsung.com/
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
####################################
reader_type1="/dev/sd"
reader_type2="/dev/mmcblk0"


if [ -z $2 ]
then
    echo "usage: ./sd_fusing.sh <SD Reader's device file> <filename>"
    exit 0
fi


param1=`echo "$1" | awk '{print substr($1,1,7)}'`


if [ "$param1" = "$reader_type1" ]
then 
    partition1=$1"1"
    partition2=$1"2"
    partition3=$1"3"
    partition4=$1"4"


elif [ "$1" = "$reader_type2" ]
then 
    partition1=$1"p1"
    partition2=$1"p2"
    partition3=$1"p3"
    partition4=$1"p4"


else
    echo "Unsupported SD reader"
    exit 0
fi


if [ -b $1 ]
then
    echo "$1 reader is identified."
else
    echo "$1 is NOT identified."
    exit 0
fi


####################################
# format
umount $partition1 2> /dev/null
umount $partition2 2> /dev/null
umount $partition3 2> /dev/null
umount $partition4 2> /dev/null


echo "$2 fusing..."
dd iflag=dsync oflag=dsync if=../$2 of=$1 seek=1 && \
echo "$2 image has been fused successfully."


#<Message Display>
echo "Eject SD card"




其实这个脚本的作用就是调用sd_fuse.sh脚本，将引入的第二个参数的文件，烧写到第一个参数的设备中，即将uboot写入sd卡中。
执行它，Done。




2.用TF卡烧写uboot或者其他镜像
因为我们做的整张uboot的TF卡，所以在windows下是读不到盘符的，从而也没办法进行其他镜像的下载，但是我们通过uboot对TF卡分区后，那么空出来的部分就能用来放置其他要下载的镜像。这点后面会讲到，这里先说明从TF卡写uboot使板砖恢复为板子。
首先TF卡插入板子，板子设置从TF卡启动，如果之前的操作都是正确的，那么板子应该进入了uboot，uboot指示灯点亮，板子复活
首先要做的是对TF卡分区，一张卡放几k的uboot太奢侈了，在一个也为其他镜像烧写留出空间：
终端中执行命令：


fdisk -c 1 
fatformat mmc 1:1
ext3format mmc 1:2
ext3format mmc 1:3
ext3format mmc 1:4


如果是2G卡，将命令fdisk -c 1改为fdisk -c 1 300 300 300


终端中执行sdfuse flash bootloader u-boot-iTop-4412.bin 将uboot写入nand，到这里就可以断电了，板子可以从自身的nand启动了
这里要注意这时候的uboot虽然可以使用fastboot，但是不能真正将镜像写入到nand中，可能是因为TF卡启动的原因，不明


然后切换到nand启动板子，nand分区：
fdisk -c 1 1700 50 50 
 fatformat mmc 1:1
 ext3format mmc 1:2 
 ext3format mmc 1:3 
 ext3format mmc 1:4


之后在终端中输入fastboot，出现提示指导fastboot下载镜像，
之后，cmd进入win7 fastboot所在路径，常规下载镜像，如输入fastboot flash kernal zImage下载内核。
完成后fastboot -w 清除用户区
 fastboot reboot 重启
Done。


至于直接用TF卡下载镜像的方法，之前给TF卡分区的目的就是如此，但是不推荐这个办法，不如fastboot来的方便，如果没有OTG或者不喜欢用tftp可以尝试：
将TF卡插入win7，出现盘符，新建/sdupdate路径
在里面放入需要烧写的镜像
TF卡插回板子，TF启动，进入uboot
sdfuse flash A B 即可 A为烧写的部分（kernal,bootloader..）B为镜像的文件名
也可以sdfuse all 完全烧写。


tiny210的SD卡烧写方法


tiny210因为用的是superboot，很多东西都写死了，用起来就简单多了


1.制作SD卡：


SD卡插入win7，
用SD-Flasher.exe scan SD卡
relayout SD卡之后，
fuse入需要的superboot
在SD卡中建images文件夹
放入修改好参数的FriendlyARM.ini（重要），
新建镜像的路径（参照ini）放入镜像，superboot可直接放置在images中即可


2.用SD卡烧写镜像


插入SD到板子，ini中的USB_Mode=no时板子自动烧写SD卡中的镜像
USB_Mode=Yes, 配合minitools通过USB下载相关镜像即可


重申一次FriendlyARM.ini很重要，仔细修改其中的参数才能保证下载正确


贴出ini：


#This line cannot be removed. by FriendlyARM(www.arm9.net)


CheckOneButton=No 
Action = Install 
OS = Android 


LCD-Mode = No 
#LCD-Type = S70 


USB-Mode = no


LowFormat = Yes 
VerifyNandWrite = No 
CheckCRC32=No 


StatusType = Beeper | LED 
################### Android 4.0.3 #################### 
Android-BootLoader = Superboot210.bin 
Android-Kernel = Android/zImage 
Android-CommandLine = root=/dev/mtdblock4 console=ttySAC0,115200 init=/linuxrc androidboot.console=ttySAC0 ctp=3 skipcali=Yes
Android-RootFs-InstallImage = Android/rootfs_android.img 


################### Android 2.3.1 #################### 
#Android-BootLoader = Superboot210.bin 
#Android-Kernel = Android2.3.1/zImage 
#Android-CommandLine = root=/dev/mtdblock4 console=ttySAC0,115200 init=/linuxrc androidboot.console=s3c2410_serial0 skipeali=yes
#Android-RootFs-InstallImage = Android2.3.1/rootfs_android.img
 
################### Linux #################### 
Linux-BootLoader = Superboot210.bin 
Linux-Kernel = Linux/zImage 
Linux-CommandLine = root=/dev/mtdblock4 console=ttySAC0,115200 init=/linuxrc 
Linux-RootFs-InstallImage = Linux/rootfs_qtopia_qt4.img 


################### Windows CE6.0 #################### 
WindowsCE6-Bootloader = Superboot210.bin 
WindowsCE6-BootLogo = WindowsCE6\bootlogo.bmp 
WindowsCE6-InstallImage = WindowsCE6\NK.bin
WindowsCE6-RunImage = WindowsCE6\NK.bin


要注意的是：
CheckOneButton表示是否自动安装
USB-Mode SD卡下载还是USB下载
LowFormat 表示是否格式化flash 如果不想动文件系统可以no
ctp是电容屏的型号，具体查阅手册，电阻屏不需要
skipcali为跳过触摸屏的校准


到这里uboot也就告一段落了，毕竟uboot的功能很小，只要会下载，基本的调试修改，就可以使用开发板了，在这个上面耽搁太多时间就影响到内核的学习了。

--------------------- 
作者：摇摆猫_FearLess 
来源：CSDN 
原文：https://blog.csdn.net/jc353231919/article/details/47989419 
版权声明：本文为博主原创文章，转载请附上博文链接！
```















```
start.S解析

首先是头文件包含

#include <config.h>
#include <version.h>
#if defined(CONFIG_ENABLE_MMU)
#include <asm/proc/domain.h>
#endif
#include <regs.h>
 
#ifndef CONFIG_ENABLE_MMU
#ifndef CFG_PHY_UBOOT_BASE
#define CFG_PHY_UBOOT_BASE CFG_UBOOT_BASE
#endif
#endif

config.h是在配置时生成的文件，里面包含的是linux/autoconf.h，在mkconfig文件中可以看到生成的指令，内部包含板子的型号等参数。
version.h是uboot版本号，由Makefile生成。

asm/proc/domain.h不是uboot的原生目录，是配置时创建的符号链接，实际指向asm-arm/proc-armv/domain.h
regs.h也是配置时生成的，实际为s5pc110.h
上面两个目录这样配置是为了增强可移植性。

接着定义两个宏 CFG_PHY_UBOOT_BASE CFG_UBOOT_BASE 为uboot的物理地址，CFG_UBOOT_BASE地址为0x33e00000

#if defined(CONFIG_EVT1) && !defined(CONFIG_FUSED)
    .word 0x2000
    .word 0x0
    .word 0x0
    .word 0x0
#endif

宏CONFIG_EVT1已经被定义了，后面定义4个字，由于210是32位，所以一个字就是4个字节。这里定义4个字是为了填充uboot前16字节，因为210sd卡启动时会有16B的校验头，所以这里预先填充16字节的数据，以后计算校验头的时候直接覆盖前16字节。

.globl _start
_start: b  reset
    ldr pc, _undefined_instruction
    ldr pc, _software_interrupt
    ldr pc, _prefetch_abort
    ldr pc, _data_abort
    ldr pc, _not_used
    ldr pc, _irq
    ldr pc, _fiq

start.S的开始，这里虽然定义了异常向量表，但是由于uboot主要是用作启动，运行过程很短，所以基本不会用到。
开头的 b reset 跳转到reset，reset就是代码真正有意义的起始位置。 构建异常向量表

.global _end_vect
_end_vect:
 
    .balignl 16,0xdeadbeef

这里定义了结束时候的动作，.balignl是为了字节对齐，后面第一个参数表示16字节对齐，第二个参数表示填充内容，当地址偏移4个地址就填充0xdeadbeef，直到地址16字节对齐为止。0xdeadbeef本身没有别的意思，只是十六进制的数刚好组成了两个单词，坏牛肉，意思就是没用的东西，用来填充内存的。

_TEXT_BASE:
    .word   TEXT_BASE

/*
 * Below variable is very important because we use MMU in U-Boot.
 * Without it, we cannot run code correctly before MMU is ON.
 * by scsuh.
 */
_TEXT_PHY_BASE:
    .word   CFG_PHY_UBOOT_BASE
 
.globl _armboot_start
_armboot_start:
    .word _start
 
/*
 * These are defined in the board-specific linker script.
 */
.globl _bss_start
_bss_start:
    .word __bss_start
 
.globl _bss_end
_bss_end:
    .word _end

定义TEXT_BASE，就是链接时的链接地址，0xc3e0_0000，随后又定义了CFG_PHY_UBOOT_BASE，之后定义了启动时的_start还有bss段。这些段的地址都是从链接脚本中得到的，这里相当于开辟空间存放这些地址。

/*
 * the actual reset code
 */
 
reset:
    /*
     * set the cpu to SVC32 mode and IRQ & FIQ disable
     */
    @;mrs   r0,cpsr
    @;bic   r0,r0,#0x1f
    @;orr   r0,r0,#0xd3
    @;msr   cpsr,r0
    msr cpsr_c, #0xd3     @ I & F disable, Mode: 0x13 - SVC

实际的reset代码。前面四行被注释掉了，实际代码只有一行msr cpsr_c, #0xd3 msr传送数据到协处理器将#0xd3传送到cpsr寄存器的低八位（cpsr_c表示cpsr寄存器的低八位），0xd3就是11010011，禁止IRQ、FIQ，使处理器为ARM模式（即使用ARM指令而非Thumb指令），模式选择SVC模式。设置处理器模式(SVC)


cpu_init_crit:
……
bl disable_l2cache

bl set_l2cache_auxctrl_cycle

bl enable_l2cache

       /*
        * Invalidate L1 I/D
        */
        mov r0, #0                  @ set up for MCR
        mcr p15, 0, r0, c8, c7, 0   @ invalidate TLBs
        mcr p15, 0, r0, c7, c5, 0   @ invalidate icache
 
       /*
        * disable MMU stuff and caches
        */
        mrc p15, 0, r0, c1, c0, 0
        bic r0, r0, #0x00002000     @ clear bits 13 (--V-)
        bic r0, r0, #0x00000007     @ clear bits 2:0 (-CAM)
        orr r0, r0, #0x00000002     @ set bit 1 (--A-) Align
        orr r0, r0, #0x00000800     @ set bit 12 (Z---) BTB
        mcr    p15, 0, r0, c1, c0, 0

接着是cpu初始化的代码，随后是 关L2 cache，设置L2 cache，使能L2 cache，刷新L1 cache的 Icache和 Dcache，关闭MMU。
这部分都是和CPU的cache和mmu有关，大概知道即可。 初始化cpu cache，关闭mmu

        /* Read booting information */
        ldr r0, =PRO_ID_BASE
        ldr r1, [r0,#OMR_OFFSET]
        bic r2, r1, #0xffffffc1

/* NAND BOOT */
    cmp r2, #0x0      @ 512B 4-cycle
    moveq   r3, #BOOT_NAND
 
    cmp r2, #0x2      @ 2KB 5-cycle
    moveq   r3, #BOOT_NAND
 
    cmp r2, #0x4      @ 4KB 5-cycle8-bit ECC
    moveq   r3, #BOOT_NAND
 
    cmp r2, #0x6      @ 4KB 5-cycle16-bit ECC
    moveq   r3, #BOOT_NAND
 
    cmp r2, #0x8      @ OneNAND Mux
    moveq   r3, #BOOT_ONENAND
 
    /* SD/MMC BOOT */
    cmp     r2, #0xc
    moveq   r3, #BOOT_MMCSD
 
    /* NOR BOOT */
    cmp     r2, #0x14
    moveq   r3, #BOOT_NOR 

/* Uart BOOTONG failed */
    cmp     r2, #(0x1<<4)
    moveq   r3, #BOOT_SEC_DEV
     
    ldr r0, =INF_REG_BASE//0xE010F000
    str r3, [r0, #INF_REG3_OFFSET] //0x0c

读取启动信息，根据PRO_ID_BASE和OMR_OFFSET得知寄存器地址为0xE0000004，这个寄存器中的值反映了OMpin的接法，也就是知道了启动介质是Nand还是SD还是别的东西。之后比较r2，将对应的启动介质的地址写入r3中。最后将r3的数据传入INF_REG_BASE+INF_REG3_OFFSET中，查手册知这是INFORM3，用户定义数据的寄存器，这里用来存储启动介质的信息。

/*
 * Go setup Memory and board specific bits prior to relocation.
 */
 
ldr sp, =0xd0036000 /* end of sram dedicated to u-boot */
sub sp, sp, #12  /* set stack */
mov fp, #0
 
bl  lowlevel_init  /* go setup pll,mux,memory */

这里第一次初始化栈地址，栈地址在SRAM中。这里初始化栈，之后调用lowlevel_init函数去初始化各个硬件，lowlevel_init的详细分析在：http://blog.csdn.net/ldzq_sue/article/details/78354879
关看门狗 开发板供电置锁 恢复I/O状态 初始化时钟 DDR初始化 串口初始化并打印调试信息"OK"

/* To hold max8698 output before releasing power on switch,
 * set PS_HOLD signal to high
 */
ldr r0, =0xE010E81C  /* PS_HOLD_CONTROL register */
ldr r1, =0x00005301     /* PS_HOLD output high */
str r1, [r0]
 
这里又进行了一次开发板置锁操作，实际上在lowlevel_init函数里已经做过了。

/* get ready to call C functions */
ldr sp, _TEXT_PHY_BASE/* setup temp stack pointer */
sub sp, sp, #12
mov fp, #0        /* no previous frame, so fp=0 */

第二次设置栈，因为之前的代码都还在SRAM中运行，内存空间很小(只有96KB)。第二部分还在SD卡（启动介质）里，现在DDR已经初始化了，可以使用更多的空间，将整个代码都迁移到DDR中。。这次设置栈地址在DDR SDRAM中，虽然设置的栈地址和uboot代码链接地址相同，但是由于ARM中的栈是满减栈(FD)，所以uboot代码向后执行，而栈则向前压栈，并不会冲突。
 
/* when we already run in ram, we don't need to relocate U-Boot.
 * and actually, memory controller must be configured before U-Boot
 * is running in ram.
 */
ldr r0, =0xff000fff
bic r1, pc, r0       /* r0 <- current base addr of code */
ldr r2, _TEXT_BASE    /* r1 <- original base addr in ram */
bic r2, r2, r0       /* r0 <- current base addr of code */
cmp     r1, r2                  /* compare r0, r1                  */
beq     after_copy    /* r0 == r1 then skip flash copy   */

这里再次检查当前地址与链接地址(之前在lowlevel_init中检查过)，判断是否需要重定位。冷启动的这个时候，这些代码还运行在SRAM中，需要进行重定位来将整个代码迁移到DDR中。

#if defined(CONFIG_EVT1)
    /* If BL1 was copied from SD/MMC CH2 */
    ldr r0, =0xD0037488
    ldr r1, [r0]
    ldr r2, =0xEB200000
    cmp r1, r2
    beq     mmcsd_boot
#endif

0xD003_7488用户手册上没有，在iROM_ApplicationNote里，0xD0037488 V210_SDMMC_BASE Current boot channel. 0xEB20000是SDMA System Address register，用来为DMA transfer存储系统内存地址。r1和r2比较，如果相同就说明是通过SD卡从通道2启动，跳转去执行mmcsd_boot。

 
    ldr r0, =INF_REG_BASE//0xE010F000
    ldr r1, [r0, #INF_REG3_OFFSET]//0x0c
    cmp r1, #BOOT_NAND    /* 0x0 => boot device is nand */
    beq nand_boot
    cmp r1, #BOOT_ONENAND /* 0x1 => boot device is onenand */
    beq onenand_boot
    cmp     r1, #BOOT_MMCSD
    beq     mmcsd_boot
    cmp     r1, #BOOT_NOR
    beq     nor_boot
    cmp     r1, #BOOT_SEC_DEV
    beq     mmcsd_boot

这里和上面代码的作用基本相同而且更全面，使用了之前读取OM pin后存储到INFORM的启动介质信息，可以看出上一段的代码有点重复了。
后面是各个启动介质boot的函数，这里只看mmcsd的：

mmcsd_boot:
#if DELETE //这个宏没有被定义过
    ldr     sp, _TEXT_PHY_BASE      
    sub     sp, sp, #12
    mov     fp, #0
#endif
    bl      movi_bl2_copy
    b       after_copy

实际上的代码之后最后两行，movi_bl2_copy是在cpu/s5pc11x/movi.c文件里的一个C语言函数，功能是重定位代码到DDR中，之后跳转到 after_copy 去。 重定位代码到DDR

after_copy:
 
#if defined(CONFIG_ENABLE_MMU)
enable_mmu:
    /* enable domain access */
    ldr r5, =0x0000ffff
    mcr p15, 0, r5, c3, c0, 0     @load domain access register

加载域访问寄存器。
 
    /* Set the TTB register */
    ldr r0, _mmu_table_base
    ldr r1, =CFG_PHY_UBOOT_BASE
    ldr r2, =0xfff00000
    bic r0, r0, r2
    orr r1, r0, r1
    mcr p15, 0, r1, c2, c0, 0
 
设置转换表(Translation Table Base)，_mmu_table_base 是一个标号，里面的内容是
_mmu_table_base:
    .word mmu_table//.word 就表示在当前位置放一个值，值是mmu_table
意思就是把_mmu_table_base地址的内容传递给r0，而_mmu_table_base上的内容是mmu_table。

    /* Enable the MMU */
mmu_on:
    mrc p15, 0, r0, c1, c0, 0
    orr r0, r0, #1
    mcr p15, 0, r0, c1, c0, 0
    nop
    nop
    nop
    nop
#endif

使能MMU，这些设置内存相关的都是通过协处理器CP15来设置的。
建立虚拟地址映射物理地址的转换表并使能MMU

skip_hw_init:
    /* Set up the stack                         */
stack_setup:
#if defined(CONFIG_MEMORY_UPPER_CODE)//定义了这个宏
    ldr sp, =(CFG_UBOOT_BASE + CFG_UBOOT_SIZE - 0x1000)
#else
    ldr r0, _TEXT_BASE    /* upper 128 KiB: relocated uboot   */
    sub r0, r0, #CFG_MALLOC_LEN  /* malloc area                      */
    sub r0, r0, #CFG_GBL_DATA_SIZE /* bdinfo                        */
#if defined(CONFIG_USE_IRQ)//没有定义这个宏
    sub r0, r0, #(CONFIG_STACKSIZE_IRQ+CONFIG_STACKSIZE_FIQ)
#endif
    sub sp, r0, #12      /* leave 3 words for abort-stack    */
 
#endif

第三次设置栈，这次设置栈的目的是为了调整栈的位置，使栈放在比较合适的地方（安全，紧凑而又不浪费内存）。

clear_bss:
    ldr r0, _bss_start    /* find start of bss segment        */
    ldr r1, _bss_end      /* stop here                        */
    mov    r2, #0x00000000       /* clear                            */
 
clbss_l:
    str r2, [r0]      /* clear loop...                    */
    add r0, r0, #4
    cmp r0, r1
    ble clbss_l
     
    ldr pc, _start_armboot
 
_start_armboot:
    .word start_armboot

清bss段，bss段的开头和结尾地址是从链接脚本u-boot.lds中得到的。之后长跳转到_start_armboot，即DDR中无缝衔接进行到启动第二阶段。

至此，uboot启动第一阶段完毕。回顾整个启动过程，首先上电后板子内部的iROM里的BL0根据OMpin来判断启动介质，随后将启动代码的BL1部分(前16KB部分，具体大小不太清楚，数据手册写的最大16KB，但实际代码都是16KB。总之16KB是肯定可以工作的。)读取到SRAM中去启动执行，启动过程中执行了很多工作，包括：
构建异常向量表
设置处理器模式(SVC)
初始化cpu cache，关闭mmu
关看门狗
开发板供电置锁
恢复I/O状态
初始化时钟
初始化DDR
初始化串口并打印调试信息"OK"
重定位代码到DDR
建立虚拟地址映射物理地址的转换表并使能MMU
跳转到第二阶段
之后的代码就从 start_armboot开始执行。
--------------------- 
作者：ldzq_sue 
来源：CSDN 
原文：https://blog.csdn.net/ldzq_sue/article/details/78366152 
版权声明：本文为博主原创文章，转载请附上博文链接！

```
