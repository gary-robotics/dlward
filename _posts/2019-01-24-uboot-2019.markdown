---
layout:     post                    # 使用的布局（不需要改）
title:      uboot                # 标题 
subtitle:    第一篇                  #副标题
date:       2018-06-04              # 时间
author:     BY Edlward              # 作者
header-img: img/post-bg-2015.jpg    #这篇文章标题背景图片
catalog: true                       # 是否归档
tags:                               #标签
    - linux
---


```
#include <asm-offsets.h>          /* 头文件在根目录下的include及根
#include <config.h>             目录下的arch/arm/include目录 */ 
#include <version.h>
#include <asm/system.h>
#include <linux/linkage.h>

.globl _start
_start: b   reset //跳转到reset 进行地址判断，设置SVC模式
    ldr pc, _undefined_instruction  //未定义指令异常
    ldr pc, _software_interrupt     //软中断
    ldr pc, _prefetch_abort         //预取址终止
    ldr pc, _data_abort             //数据异常
    ldr pc, _not_used               //未使用，占位用
    ldr pc, _irq                    //中断
    ldr pc, _fiq                    //快中断
#ifdef CONFIG_SPL_BUILD
_undefined_instruction: .word _undefined_instruction
_software_interrupt:    .word _software_interrupt
_prefetch_abort:    .word _prefetch_abort
_data_abort:        .word _data_abort
_not_used:      .word _not_used
_irq:           .word _irq
_fiq:           .word _fiq
_pad:           .word 0x12345678 /* now 16*4=64 */
#else
_undefined_instruction: .word undefined_instruction
_software_interrupt:    .word software_interrupt
_prefetch_abort:    .word prefetch_abort
_data_abort:        .word data_abort
_not_used:      .word not_used
_irq:           .word irq
_fiq:           .word fiq
_pad:           .word 0x12345678 /* now 16*4=64 */
#endif  /* CONFIG_SPL_BUILD */

.global _end_vect
_end_vect:

    .balignl 16,0xdeadbeef
```

##  CONFIG_SPL_BUILD宏
> 我们可以看到异常向量表有两个定义，多了宏：#ifdef CONFIG_SPL_BUILD 
什么是SPL呢，我们需要从启动机制说起： 
以S3C6410为例： 
1、将uboot.bin前4K拷贝到片内内存SRAM中，进行初始化内存SDRAM 
2、将uboot.bin的内容约为200k全部拷贝到SDRAM中，PC指针跳转到SDRAM开始运行（前4K内容会判断自身在哪个内存当中，判断在SDRAM中则直接跳过前4K到后续部分进行运行。） 
3、将内核加载到SDRAM中运行。

有了这种情况，随着厂家处理器改进：增加了片内内存的大小约为96K左右，希望整个Uboot.bin全部在片内内存进行运行，然后把内核加载到片外内存SDRAM中运行。 
但是呢，uboot整体编译出来至少100K-200K，这样就造成了没法执行上述方案，于是Uboot作者就把uboot设置成2个部分： 
ubootspl.bin (16K)和 uboot.bin （210K） 
ubootspl.bin放到片内SRAM运行，进行初始化内存，将uboot.bin拷贝到外存SDRAM中运行，然后PC指针直接跳转到SDRAM中进行运行。 
这就是#ifdef CONFIG_SPL_BUILD 宏的由来。


